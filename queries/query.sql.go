// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package queries

import (
	"context"
)

const getLog = `-- name: GetLog :one
SELECT id, name, slug, created_at, updated_at FROM logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLog(ctx context.Context, id int64) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLogBySlug = `-- name: GetLogBySlug :one
SELECT id, name, slug, created_at, updated_at FROM logs
WHERE slug = $1 LIMIT 1
`

func (q *Queries) GetLogBySlug(ctx context.Context, slug string) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLogBySlug, slug)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLogEntriesByLogIdOrderByDateDesc = `-- name: ListLogEntriesByLogIdOrderByDateDesc :many
SELECT id, log_id, coffee, method, grind, notes, coffee_grams, water_grams, created_at, updated_at FROM entries
WHERE log_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListLogEntriesByLogIdOrderByDateDesc(ctx context.Context, logID int64) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listLogEntriesByLogIdOrderByDateDesc, logID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.LogID,
			&i.Coffee,
			&i.Method,
			&i.Grind,
			&i.Notes,
			&i.CoffeeGrams,
			&i.WaterGrams,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogs = `-- name: ListLogs :many
SELECT id, name, slug, created_at, updated_at FROM logs
ORDER BY name ASC
`

func (q *Queries) ListLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
