// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (display_name, username, password, time_zone)
VALUES ($1, $2, $3, $4)
RETURNING id, display_name, username, password, time_zone, created_at, updated_at
`

type CreateUserParams struct {
	DisplayName string
	Username    string
	Password    string
	TimeZone    sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.DisplayName,
		arg.Username,
		arg.Password,
		arg.TimeZone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Password,
		&i.TimeZone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, display_name, username, password, time_zone, created_at, updated_at
FROM users
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Password,
		&i.TimeZone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, display_name, username, password, time_zone, created_at, updated_at
FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Password,
		&i.TimeZone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_name = $2,
	username     = $3,
	password     = $4,
	time_zone    = $5,
	updated_at   = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, display_name, username, password, time_zone, created_at, updated_at
`

type UpdateUserParams struct {
	ID          int64
	DisplayName string
	Username    string
	Password    string
	TimeZone    sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.ID,
		arg.DisplayName,
		arg.Username,
		arg.Password,
		arg.TimeZone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.DisplayName,
		&i.Username,
		&i.Password,
		&i.TimeZone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
