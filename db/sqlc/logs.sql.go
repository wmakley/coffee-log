// Code generated by sqlc. DO NOT EDIT.
// source: logs.sql

package sqlc

import (
	"context"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (user_id, slug)
VALUES ($1, $2)
RETURNING id, user_id, slug, created_at, updated_at
`

type CreateLogParams struct {
	UserID int64
	Slug   string
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog, arg.UserID, arg.Slug)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLog = `-- name: GetLog :one
SELECT id, user_id, slug, created_at, updated_at
FROM logs
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetLog(ctx context.Context, id int64) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLog, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLogBySlug = `-- name: GetLogBySlug :one
SELECT id, user_id, slug, created_at, updated_at
FROM logs
WHERE slug = $1
LIMIT 1
`

func (q *Queries) GetLogBySlug(ctx context.Context, slug string) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLogBySlug, slug)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLogByUserId = `-- name: GetLogByUserId :one
SELECT id, user_id, slug, created_at, updated_at
FROM logs
WHERE user_id = $1
LIMIT 1
`

func (q *Queries) GetLogByUserId(ctx context.Context, userID int64) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLogByUserId, userID)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Slug,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, user_id, slug, created_at, updated_at
FROM logs
ORDER BY id ASC
`

func (q *Queries) ListLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Log{}
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Slug,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
